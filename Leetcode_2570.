#include <stdlib.h>
#include <stdio.h>

int compare(const void *a, const void *b) {
    return (*(int **)a)[0] - (*(int **)b)[0];
}

int** mergeArrays(int** nums1, int nums1Size, int* nums1ColSize, int** nums2, int nums2Size, int* nums2ColSize, int* returnSize, int** returnColumnSizes) {
    int combinedSize = nums1Size + nums2Size;
    int** combined = (int**)malloc(combinedSize * sizeof(int*));
    for (int i = 0; i < combinedSize; i++) {
        combined[i] = (int*)malloc(2 * sizeof(int));
    }

    int i = 0, j = 0, k = 0;
    while (i < nums1Size && j < nums2Size) {
        if (nums1[i][0] == nums2[j][0]) {
            combined[k][0] = nums1[i][0];
            combined[k][1] = nums1[i][1] + nums2[j][1];
            i++;
            j++;
            k++;
        } else if (nums1[i][0] < nums2[j][0]) {
            combined[k][0] = nums1[i][0];
            combined[k][1] = nums1[i][1];
            i++;
            k++;
        } else {
            combined[k][0] = nums2[j][0];
            combined[k][1] = nums2[j][1];
            j++;
            k++;
        }
    }

    while (i < nums1Size) {
        combined[k][0] = nums1[i][0];
        combined[k][1] = nums1[i][1];
        i++;
        k++;
    }

    while (j < nums2Size) {
        combined[k][0] = nums2[j][0];
        combined[k][1] = nums2[j][1];
        j++;
        k++;
    }

    qsort(combined, k, sizeof(int*), compare);

    int** result = (int**)malloc(k * sizeof(int*));
    *returnColumnSizes = (int*)malloc(k * sizeof(int));
    for (int l = 0; l < k; l++) {
        result[l] = (int*)malloc(2 * sizeof(int));
        result[l][0] = combined[l][0];
        result[l][1] = combined[l][1];
        (*returnColumnSizes)[l] = 2;
    }

    *returnSize = k;

    for (int l=0; l<combinedSize;l++){
        free(combined[l]);
    }
    free(combined);

    return result;
}
