

#define OFFSET 10000
#define SIZE 20001  // to cover range -10000 to 10000

int* topKFrequent(int* nums, int numsSize, int k, int* returnSize) {
    int freq[SIZE] = {0};
    int* result = (int*)malloc(k * sizeof(int));

    // 1. Build frequency map using array
    for (int i = 0; i < numsSize; i++) {
        freq[nums[i] + OFFSET]++;
    }

    // 2. Find k most frequent elements
    for (int i = 0; i < k; i++) {
        int maxFreq = 0;
        int maxIndex = -1;

        for (int j = 0; j < SIZE; j++) {
            if (freq[j] > maxFreq) {
                maxFreq = freq[j];
                maxIndex = j;
            }
        }

        // Add to result and mark as used
        result[i] = maxIndex - OFFSET;
        freq[maxIndex] = 0;  // prevent picking again
    }

    *returnSize = k;
    return result;
}
