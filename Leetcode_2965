/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* findMissingAndRepeatedValues(int** grid, int gridSize, int* gridColSize, int* returnSize) {
    int n = gridSize; 
    int total = n * n;  // The numbers should be in range [1, n^2]
    int* hashMap = (int*)calloc(total + 1, sizeof(int)); // HashMap initialized to 0
    int* result = (int*)malloc(2 * sizeof(int));
    *returnSize = 2;

    // Step 1: Traverse the grid and populate the hash map
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            hashMap[grid[i][j]]++;
        }
    }

    // Step 2: Find repeated and missing values
    int repeated = -1, missing = -1;
    for (int i = 1; i <= total; i++) {
        if (hashMap[i] == 2) {
            repeated = i;
        } else if (hashMap[i] == 0) {
            missing = i;
        }
    }

    result[0] = repeated;
    result[1] = missing;

    // Clean up
    free(hashMap);

    return result;
}
